---
title: "Signature Exhaustion IP"
author:
  - name: Mercedes Guerrero-Murillo
    email: mguerrero@carrerasresearch.org
date: now
format: 
  html:
    toc: true
    self-contained: true
    anchor-sections: true
    smooth-scroll: true
    code-copy: true
    code-overflow: wrap
    date-format: "dddd MMM D, YYYY - HH:mm A"
---

```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, cache.lazy = FALSE)
memory.limit()
```

```{r load packages, message=FALSE, warning=FALSE}
library(Seurat)
library(ggplot2)
library(ggalluvial)
library(grid)
library(forcats)
library(see)
library(dplyr)
library(gghalves)
library(viridis)
library(stringr)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rstatix)
library(clusterProfiler)
library(EnhancedVolcano)
library(introdataviz)
library(UCell)
library(ComplexHeatmap)
```

```{r colors}
cols2 <- c(
  "CD4+ Naive T cells" = "#33A02C",
  "CD4+ CEntral/Effector memory T cells (CM/EM)" = "#B2DF8A",
  "CD8+ cytotoxic T cells" = "#185B88",
  "CD8+ Effector T cells (E)" = "#1F78B4",
  "CD8+ Eff/Mem T cells (EM)" = "#A6CEE3",
  "Early prolif: MCM3/5/7+ PCNA+ T cells" = "#FB9A99",
  "Late prolif: histones enriched MKI67+ T cells" = "#E31A1C",
  "Late prolif: CCNB1/2+ CDK1+ T cells" = "#CAB2D6",
  "Late prolif: STMN1+ BIRC5+" = "#FDBF6F",
  "Ribosomal/Mitochondrial/Degraded cells" = "#FF7F00",
  "gamma-delta T cells" = "#6A3D9A"
)
cols1 <- cols2
cols3 <- c("CAR+" = "#66c2a5", "CAR-" = "#fc8d62")
cols4 <- c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")
cols5 <- c("IP" = "#4E6AAB", "Peak" = "#e78ac3")
cols6 <- c("CD4" = "#147D2C", "CD8" = "#F5C936", "Unknown" = "#7f7f7f")
cols7 <- c("G1" = "#F8766D", "G2M" = "#00BA38", "S" = "#619CFF")
cols8 <- c("#E69F00FF", "#56B4E9FF", "#009E73FF", "#F0E442FF")

theme_set(theme_minimal())
```


# Exhaustion

```{r , fig.height=10, fig.width=12, message=FALSE}
integrated.obj <- readRDS("integrated.nd.obj.rds")
Idents(integrated.obj) <- factor(x = Idents(integrated.obj), levels = c("CD8+ Eff/Mem T cells (EM)", "CD8+ Effector T cells (E)", "CD8+ cytotoxic T cells", "CD4+ CEntral/Effector memory T cells (CM/EM)", "CD4+ Naive T cells", "gamma-delta T cells", "Late prolif: CCNB1/2+ CDK1+ T cells", "Early prolif: MCM3/5/7+ PCNA+ T cells", "Late prolif: histones enriched MKI67+ T cells", "Late prolif: STMN1+ BIRC5+", "Ribosomal/Mitochondrial/Degraded cells"))
integrated.obj$clusters <- Idents(integrated.obj)

integrated.obj$ClinPat <- ifelse(integrated.obj$Patient_id %in% c("patient1", "patient4"), "NR/SR", "MR/LR")
```

#  Analysis.


```{r , fig.height=10, fig.width=12, message=FALSE}
# TIM3 => HAVCR2
exhaustion_genes <- c("TOX", "PDCD1", "LAG3", "TIGIT", "CASP8", "HAVCR2", "CTLA4", "PTPN11", "CD160", "CD244")
integrated.obj <- AddModuleScore(object = integrated.obj, features = list(exhaustion_genes), name = "Exh.MGM")
```

```{r , fig.height=15, fig.width=17, message=FALSE}
FeaturePlot(integrated.obj, features = exhaustion_genes)
```
 
# IP
 
```{r , fig.height=15, fig.width=17, message=FALSE}
integrated.obj$Prolif <- ifelse(integrated.obj$clusters %in% c("0 CD8+ Eff mem (EM)", "1 CD8+ Eff cytotox (Ecyt)", "3 CD4+ Naive/SCM", "6 CD4+ Central/Effector memory (CM/EM)", "9 γδ Tcells"), "Non-prolif", "Prolif")

integrated.obj$Clusters_2 <- as.character(Idents(integrated.obj))
integrated.obj$Clusters_2[integrated.obj$seurat_clusters %in% c("2", "4", "5", "7", "8")] <- "Proliferative cells"

integrated.obj.IP <- subset(x = integrated.obj, subset = Timepoint == "IP")
```

## Signature expression 

```{r , fig.height=14, fig.width=12, message=FALSE}
aux_df1 <- data.frame(seurat_clusters = Idents(integrated.obj.IP), integrated.obj.IP[[]], FetchData(integrated.obj.IP, vars = exhaustion_genes, slot = "data"))
```

Print the average, max and sd for each gene

```{r , fig.height=10, fig.width=12, message=FALSE}
aux_df1 %>%
  group_by(Patient_id, Timepoint, Class1) %>%
  summarise_at(vars(one_of(exhaustion_genes)), list(mean = mean, max = max, sd = sd)) %>%
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>%
  scroll_box(width = "100%", height = "500px")
```


```{r , fig.height=10, fig.width=12, message=FALSE}
FeaturePlot(integrated.obj, features = "Exh.MGM1")

# Prolif/nonProlif
ggplot(aux_df1, aes(x = fct_reorder(Prolif, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Prolif)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = c("grey", "#AB6ED1"))

# CAR+/CAR-

ggplot(aux_df1, aes(x = fct_reorder(Class1, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Class1)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols3)


# CD4/CD8
aux_df1 <- aux_df1[which(aux_df1$final_criteria != "Unknown"), ]

ggplot(aux_df1, aes(x = fct_reorder(final_criteria, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = final_criteria)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols6)

# CAR+/CAR- Only CD4

ggplot(aux_df1[which(aux_df1$final_criteria == "CD4"), ], aes(x = fct_reorder(Class1, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Class1)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols3)

# CAR+/CAR- Only CD8

ggplot(aux_df1[which(aux_df1$final_criteria == "CD8"), ], aes(x = fct_reorder(Class1, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Class1)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols3)

# Patient
ggplot(aux_df1, aes(x = fct_reorder(Patient_id, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Patient_id)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols4) +
  facet_grid(~Class1)

# Condition
ggplot(aux_df1, aes(x = fct_reorder(Condition, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Condition)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("")
# +  scale_fill_manual(values =  cols6)

# Clusters

ggplot(aux_df1, aes(x = fct_reorder(clusters, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = clusters)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols2)

ggplot(aux_df1, aes(x = fct_reorder(Clusters_2, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = Clusters_2)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  scale_fill_manual(values = cols1)

# Clin Pat

ggplot(aux_df1, aes(x = fct_reorder(ClinPat, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = ClinPat)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("")

ggplot(aux_df1, aes(x = fct_reorder(ClinPat, Exh.MGM1, .fun = median, .desc = TRUE), y = Exh.MGM1, fill = ClinPat)) +
  geom_violin(scale = "width") +
  geom_boxplot(outlier.shape = NA, width = 0.1) +
  theme_classic() +
  theme(axis.text.x = element_text(size = 16), axis.text.y = element_text(size = 16)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  xlab("") +
  facet_grid(~Class1)
```

# Published signatures ( from JuanLu)

```{r , fig.height=10, fig.width=12, message=FALSE}
Yost.markers <- read.csv("bcc_tcell_top100_markers_Yost_et al.txt", sep = "\t")

Yost.markers2 <- Yost.markers[Yost.markers$cluster == "CD8_ex", ]

signatures <- list(
  Exhausted_Wherry_2007 = c("AARD", "ACADVL", "ACKR3", "ADAM7", "ADCY6", "ADGRG1", "AFP", "AHR", "ALCAM", "ALOXE3", "ANXA3", "AOPEP", "APOBEC2", "ART1", "ATP5IF1", "ATP5MF", "AUH", "BAAT", "BCL2L11", "BCL3", "BLK", "BTK", "CANX", "CCDC28B", "CCDC93", "CCR6", "CCRL2", "CD22", "CD244", "CELA1", "CELF4", "CEP250", "CFH", "CFHR2", "CISH", "CKMT1B", "CKMT2", "CLIC4", "COCH", "CORO2B", "CRYZ", "CSF1", "CSRP1", "CTSE", "CUBN", "CXCR2", "CXCR5", "CYTH3", "DDIT4", "DHRS7B", "DLG3", "DOCK7", "DPP7", "EEA1", "EFNB3", "EGR2", "ELK1", "ENTPD1", "EOMES", "EPCAM", "ERCC5", "ETV1", "FAM171A1", "FAM207A", "FASLG", "FKBP10", "FLNA", "FLT3", "FSTL1", "GAMT", "GAPDHS", "GATA1", "GCM2", "GCSAM", "GDNF", "GPD2", "GPM6B", "GRIA1", "GRM8", "GSX1", "GTF3C4", "GZMB", "H1-4", "H1-5", "HAO2", "HIF1A", "HLA-DMA", "HMGA2", "HOXB8", "HOXC6", "HOXD10", "HSD3B7", "HSPA4L", "IFI27L2", "IFIH1", "IL10", "IL1A", "IL1RN", "IMMT", "ITGAV", "KCNAB1", "KCNU1", "KCTD9", "KHK", "KRT27", "LAMC1", "LAT2", "LCLAT1", "LGMN", "LHPP", "LITAF", "LRP10", "LY75", "LY86", "MAP2", "MC5R", "MCAM", "MFHAS1", "MKI67", "MMP14", "MRPL48", "MRPS2", "MS4A1", "MYCL", "MYO6", "MYRF", "NAB2", "NAT2", "NDUFB4", "NDUFS4", "NEFH", "NELFE", "OSMR", "PARP1", "PAWR", "PERP", "PLA2R1", "PLOD3", "PLSCR1", "POLR2C", "PRDM1", "PRL", "PROX1", "PRR15", "PRRC1", "PTCH1", "PTMS", "PTPN11", "PTPRA", "PTPRJ", "RGS16", "RPRD1B", "RPS14", "RUNX1T1", "SAPCD1", "SCGB1A1", "SCN7A", "SEC14L1", "SELP", "SFRP2", "SGO1", "SHMT2", "SLC27A4", "SLC3A1", "SLC4A7", "SLC4A8", "SPIC", "SPOCK1", "SPOCK2", "SPRR2A", "ST6GALNAC2", "STRA6", "SURF4", "SYPL1", "TBL1X", "TCF7L1", "TERF1", "TFDP1", "TG", "THEG", "TLN1", "TLR7", "TM4SF1", "TMEM150A", "TMEM214", "TMEM266", "TNFRSF4", "TWSG1", "VAMP5", "VMP1", "VNN1", "WDR55", "WFS1", "WIZ", "WNK2", "XCR1", "YAP1", "ZNF292", "ZNF35", "ZNF821"),
  Exhausted_Carmona_2019 = c("CCL3", "TNFRSF9", "RGS16", "DUT", "PRF1", "MT1A", "CCL4", "TIGIT", "PDCD1", "ANXA2", "TNFRSF4", "LAG3", "SAMSN1", "RGS2", "TOX", "BHLHE40", "STMN1", "RPS27L", "LITAF", "TXN", "HAVCR2", "HILPDA", "NR4A2", "2810417H13RIK", "CASP3", "SERPINA3", "IL2RB", "PGLYRP1", "NAP1L1", "CENPA", "COX17", "IRF8", "PLEK", "NRGN", "SH2D2A", "CTLA4", "STAT3", "HSP90B1", "MMD", "CDK6", "IFNG", "AA467197", "CST7", "SERPINB6", "GZMB", "UHRF2", "HIST1H2AP", "RBPJ", "HMGB1", "S100A4", "VAMP8", "TPI1", "BCL2A1", "RAN", "NRP1", "VIM", "GPR65", "CKS1B", "LAT2", "D16ERTD472E", "HNRNPA1", "CDKN2A", "HMGN2", "FABP5", "PGK1", "IL10RA", "LILRB4A", "CYCS", "SLC16A11", "SNRPD1", "SDF4", "PLP2", "CXCR6", "CALR", "ITGAV", "GLPeakR1", "GPD2", "CCRL2", "NDUFB8", "ADAM8", "RANBP1", "SIVA1", "CALM3", "DBI", "ATP5PF", "GM10282", "2310031A07RIK", "SEC11C", "GLDC", "SERPINB9", "ARSB", "ATP5IF1", "ID2", "KLRD1", "PLAC8", "CISD1", "ACADL", "CD74", "PGAM1"), Exhausted_Yost_2019 = Yost.markers2$gene, exhaustion_genes = c("TOX", "PDCD1", "LAG3", "TIGIT", "CASP8", "HAVCR2", "CTLA4", "PTPN11", "CD160", "CD244"), Markers_exhaustion = c("PDCD1", "LAG3", "HAVCR2", "KLRG1", "TIGIT", "CD244", "CD160", "BTLA", "CTLA4", "ENTPD1", "ID2")
)

DotPlot(integrated.obj.IP, features = signatures[[1]], group.by = "Sample_id", assay = "RNA", cols = "RdBu") + theme(axis.title = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1))

DotPlot(integrated.obj.IP, features = signatures[[2]], group.by = "Sample_id", assay = "RNA", cols = "RdBu") + theme(axis.title = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1))

DotPlot(integrated.obj.IP, features = signatures[[3]], group.by = "Sample_id", assay = "RNA", cols = "RdBu") + theme(axis.title = element_blank()) + theme(axis.text.x = element_text(angle = 45, hjust = 1))

integrated.obj.IP <- AddModuleScore_UCell(integrated.obj.IP, features = signatures)
featnames <- paste0(names(signatures), "_UCell")
DotPlot(integrated.obj.IP, features = featnames, group.by = "Patient_id", cols = "RdBu") +
  theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + xlab("") + ylab("")

# New plots
integrated.obj.IP$Pt_CAR <- paste(integrated.obj.IP$Patient_id, integrated.obj.IP$Class1, sep = "_")

DotPlot(integrated.obj.IP, features = featnames, group.by = "Pt_CAR", cols = "RdBu") +
  theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  xlab("") + ylab("")

pdf("SignatureExh_Pt_CAR.pdf")
last_plot()
dev.off()

integrated.obj.IP$Pt_CD <- paste(integrated.obj.IP$Patient_id, integrated.obj.IP$final_criteria, sep = "_")

DotPlot(subset(integrated.obj.IP, final_criteria != "Unknown"), features = featnames, group.by = "Pt_CD", cols = "RdBu") +
  theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  xlab("") + ylab("")

DotPlot(integrated.obj.IP, features = featnames, group.by = "Class1", cols = "RdBu", scale = FALSE) +
  theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  xlab("") + ylab("")

DotPlot(integrated.obj.IP, features = featnames, group.by = "annotation", cols = "RdBu", scale = FALSE) +
  theme(text = element_text(size = 18), axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + xlab("") + ylab("")
```

# Session Info

```{r}
sessionInfo()
```



